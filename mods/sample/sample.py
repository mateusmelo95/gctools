# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AIGIS
                                 A QGIS plugin
 Modelos de inteligência artificial no Qgis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-06
        git sha              : $Format:%H$
        copyright            : (C) 2021 by MMS
        email                : mateusmelosiqueira@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtWidgets import QToolButton, QMenu, QLineEdit, QLabel, QDialog, QPushButton, QCheckBox, QGridLayout
from qgis.PyQt.QtCore import QObject, Qt, QSize
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsWkbTypes, QgsGeometry, QgsPoint, QgsProject, QgsMapLayerProxyModel, QgsVectorLayer, QgsField, QgsVectorFileWriter
from qgis.gui import QgsRubberBand, QgsMapLayerComboBox, QgsFieldComboBox
from PyQt5.QtWidgets import QTabWidget, QFrame,QAbstractItemView,  QMessageBox, QShortcut, QFileDialog, QDockWidget, QComboBox, QLineEdit, QTableWidget, QTableWidgetItem, QCheckBox, QGridLayout, QLabel, QWidget, QSizePolicy,QSpacerItem, QPushButton
from qgis.PyQt.QtCore import Qt, QSize, QVariant
from qgis.PyQt.QtGui import QColor, QCursor, QPixmap, QIcon, QImage
from PyQt5.QtCore import QThread, pyqtSignal
import os
# import osr
import multiprocessing

class WorkerInference(QThread):
    def __init__(self, plugin_dir):
        QThread.__init__(self)
        self.stp = False
        self.plugin_dir = plugin_dir

    up_list = pyqtSignal(list)
    results = pyqtSignal(list)



    def run(self):
        pass

class SAMPLE:
    def __init__(self, iface, cls_main):

        # Save reference to the QGIS interface
        self.gctools = cls_main
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = self.gctools.plugin_dir

    def run(self):
        pass

        try:
            self.dock_gc.destroy()
        except:
            pass
        self.canvas = self.iface.mapCanvas()
        self.dock_gc = QDockWidget()

        # Run the dialog event loop
        self.dock_gc.setObjectName('GC Sample')
        self.dock_gc.setWindowTitle('GC Sample')

        # self.map_unidades.currentTextChanged.connect(self.changedMapUn)
        # self.visibilityChanged.connect(self.close)
        # self.setTitleText('dock_rev')
        self.dock_gc.setAllowedAreas(Qt.RightDockWidgetArea)
        self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dock_gc)

        self.layout = QGridLayout()
        r_ = 0
        self.pixmap = QPixmap(':/plugins/gctools/icons/sample.png')
        # self.pixmap.setFixedSize(50, 50)
        self.label_logo = QLabel()
        self.label_logo.setPixmap(self.pixmap.scaled(50, 50))

        self.label_logo.setMaximumSize(60, 60)
        self.layout.addWidget(self.label_logo, r_, 0, 1, 2)


        r_ += 1
        self.label_project1 = QLabel(text='Sem projeto')
        self.layout.addWidget(self.label_project1, r_, 0, 1, 1)
        self.label_project2 = QLabel()
        self.layout.addWidget(self.label_project2, r_, 1, 1, 1)
        r_ += 1
        self.pb_addrow = QPushButton()
        self.icon_pb_addrow = QIcon(':/plugins/gctools/icons/plus.png')
        # self.icon_pb_play.addPixmap(QImage(':/plugins/mmsd_gis/icons/start_icon.png'))
        self.pb_addrow.setIcon(self.icon_pb_addrow)
        self.pb_addrow.setIconSize(QSize(15, 15))
        # self.pb_play.setFixedSize(QSize(20, 20))
        self.pb_addrow.clicked.connect(self.addrow)
        self.layout.addWidget(self.pb_addrow, r_, 0, 1, 1)

        self.pb_save = QPushButton()
        self.icon_pb_save = QIcon(':/plugins/gctools/icons/save.png')
        # self.icon_pb_play.addPixmap(QImage(':/plugins/mmsd_gis/icons/start_icon.png'))
        self.pb_save.setIcon(self.icon_pb_save)
        self.pb_save.setIconSize(QSize(15, 15))
        # self.pb_play.setFixedSize(QSize(20, 20))
        self.pb_save.clicked.connect(self.saveclasses)
        self.layout.addWidget(self.pb_save, r_, 1, 1, 1)
        r_ += 1
        self.tableclasses = QTableWidget()
        self.tableclasses.setColumnCount(2)
        self.tableclasses.setHorizontalHeaderLabels(["id", "Classe"])
        self.tableclasses.setSelectionBehavior(QTableWidget.SelectRows)
        self.layout.addWidget(self.tableclasses, r_, 0, 1, 2)
        r_ += 1
        self.label_layer_samples = QLabel("Layer Amostras")
        self.layout.addWidget(self.label_layer_samples, r_, 0, 1, 2)

        r_ += 1
        self.map_layer_samples = QgsMapLayerComboBox()
        self.map_layer_samples.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        self.layout.addWidget(self.map_layer_samples, r_, 0, 1, 2)
        r_ += 1
        self.pb_addpoly = QPushButton()
        self.icon_pb_addpoly = QIcon(':/plugins/gctools/icons/plus.png')
        # self.icon_pb_play.addPixmap(QImage(':/plugins/mmsd_gis/icons/start_icon.png'))
        self.pb_addpoly.setIcon(self.icon_pb_addpoly)
        self.pb_addpoly.setIconSize(QSize(30, 30))
        # self.pb_play.setFixedSize(QSize(20, 20))
        self.pb_addpoly.clicked.connect(self.start_draw)
        self.pb_stop = QPushButton()
        self.icon_pb_stop = QIcon(':/plugins/gctools/icons/stop_bg.png')
        # self.icon_pb_play.addPixmap(QImage(':/plugins/mmsd_gis/icons/stop_icon.png'))
        self.pb_stop.setIcon(self.icon_pb_stop)
        self.pb_stop.setIconSize(QSize(30, 30))
        # self.pb_play.setFixedSize(QSize(20, 20))
        # self.pb_stop.clicked.connect(self.stop_loggin)
        self.layout.addWidget(self.pb_addpoly, r_, 0, 1, 1)
        self.layout.addWidget(self.pb_stop, r_, 1, 1, 1)

        self.wd = QWidget()
        self.wd.setLayout(self.layout)
        self.dock_gc.setWidget(self.wd)

        self.importclasses()

    def importclasses_s(self):
        qfd = QFileDialog()
        filter = "SQLite (*.sqlite)"
        openeddirname = QFileDialog.getOpenFileName(qfd, "Open project", "", filter)[0]

        if openeddirname:
            self.filltableclasses()
        self.db = openeddirname
        self.label_project1.setText("Projeto:")
        self.label_project2.setText(os.path.basename(self.db))
        self.dlg_open_classes.close()
    def importclasses_n(self):
        self.dlg_open_classes.close()
    def importclasses(self):
        self.dlg_open_classes = QDialog()
        self.dlg_open_classes.setWindowTitle("Abrir projeto")
        self.layout_open_classes = QGridLayout()
        self.pb_open_classes_sim = QPushButton(text='Sim')
        self.pb_open_classes_sim.pressed.connect(self.importclasses_s)
        self.pb_open_classes_nao = QPushButton(text='Não')
        self.pb_open_classes_nao.pressed.connect(self.importclasses_n)
        self.layout_open_classes.addWidget(self.pb_open_classes_sim, 0, 0)
        self.layout_open_classes.addWidget(self.pb_open_classes_nao, 0, 1)
        self.dlg_open_classes.setLayout(self.layout_open_classes)
        self.dlg_open_classes.show()
    def saveclasses(self):
        print("saving classes!")#
    def addrow(self):
        self.tableclasses.setRowCount(self.tableclasses.rowCount() + 1)
    def create_layer_sample_memory(self):
        # create layer if not exists
        self.epsg = QgsProject.instance().crs().postgisSrid()
        print(self.epsg)
        self.samples = QgsVectorLayer('Polygon?crs=epsg:{}&index=yes'.format(self.epsg), 'amostras_a',
                                      "memory")

        self.pr = self.samples.dataProvider()
        self.pr.addAttributes([QgsField("id", QVariant.Int), QgsField("classe", QVariant.String),
                               QgsField("classe_id", QVariant.Int)])

        QgsProject.instance().addMapLayers([self.samples])
        self.map_layer_samples.setLayer(self.samples)
        self.dlg_layer.close()

    def create_layer_sample_file(self):
        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.Directory)
        output = dialog.getExistingDirectory(None, "Selecione um diretório", "")

        if output:
            # create layer if not exists
            self.epsg = QgsProject.instance().crs().postgisSrid()

            dir = os.path.dirname(output)
            name = os.path.basename(output).replace(".shp", "")
            out_a = os.path.join(dir, "amostras_a.shp")
            polygon = QgsVectorLayer('Polygon?crs=epsg:{}&index=yes'.format(self.epsg), "amostras_a",
                                     "memory")

            options = QgsVectorFileWriter.SaveVectorOptions()
            options.driverName = 'ESRI Shapefile'
            context = QgsProject.instance().transformContext()
            # since QGIS 3.20 you should use writeAsVectorFormatV3
            QgsVectorFileWriter.writeAsVectorFormatV3(polygon, out_a, context, options)


            self.samples = QgsVectorLayer(out_a, "amostras_a", "ogr")

            self.pr = self.samples.dataProvider()
            self.pr.addAttributes([QgsField("id", QVariant.Int), QgsField("classe", QVariant.String),
                                   QgsField("classe_id", QVariant.Int)])

            QgsProject.instance().addMapLayers([self.samples])
            self.map_layer_samples.setLayer(self.samples)
            self.dlg_layer.close()
    def verify_layer_sample(self):
        layers = QgsProject.instance().mapLayersByName("amostras_a")
        exist = True if layers else False

        if not exist and self.map_layer_samples.currentText != '':
            self.dlg_layer = QDialog()
            self.dlg_layer.setWindowTitle("Salvamento da camada")
            self.layout_layer = QGridLayout()
            self.pb_layer_mem = QPushButton(text='Memória')
            self.pb_layer_mem.pressed.connect(self.create_layer_sample_memory)
            self.pb_layer_file = QPushButton(text='...')
            self.pb_layer_file.pressed.connect(self.create_layer_sample_file)
            self.layout_layer.addWidget(self.pb_layer_mem, 0, 0)
            self.layout_layer.addWidget(self.pb_layer_file, 0, 1)
            self.dlg_layer.setLayout(self.layout_layer)
            self.dlg_layer.show()

    def filltableclasses(self):
        pass
    def start_draw(self):
        self.verify_layer_sample()



